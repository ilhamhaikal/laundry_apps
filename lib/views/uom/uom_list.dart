import 'package:flutter/material.dart';
import '../../data/services/uom_service.dart';
import '../../data/models/uom.dart';

class UomPage extends StatefulWidget {
  @override
  _UomPageState createState() => _UomPageState();
}

class _UomPageState extends State<UomPage> {
  final UomService _uomService = UomService();
  List<Uom> _uomList = [];
  bool _isLoading = false;
  String? _error;

  @override
  void initState() {
    super.initState();
    _fetchUoms();
  }

  void _fetchUoms() async {
    setState(() {
      _isLoading = true;
      _error = null;
    });

    try {
      final uoms = await _uomService.getAllUoms();
      setState(() {
        _uomList = uoms;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _error = e.toString();
        _isLoading = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Gagal memuat data: $e')),
      );
    }
  }

  Future<void> _showAddUomDialog() async {
    final nameController = TextEditingController();
    bool isLoading = false;

    return showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: Text('Tambah UOM Baru'),
          content: TextField(
            controller: nameController,
            decoration: InputDecoration(
              labelText: 'Nama UOM',
              border: OutlineInputBorder(),
            ),
          ),
          actions: [
            TextButton(
              onPressed: isLoading ? null : () => Navigator.pop(context),
              child: Text('Batal'),
            ),
            ElevatedButton(
              onPressed: isLoading
                  ? null
                  : () async {
                      if (nameController.text.isEmpty) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                              content: Text('Nama UOM tidak boleh kosong')),
                        );
                        return;
                      }

                      setState(() => isLoading = true);

                      try {
                        final newUom = Uom(
                          id: '', // Will be generated by backend
                          name: nameController.text,
                        );

                        await _uomService.createUom(newUom);

                        if (!mounted) return;

                        // Show success dialog
                        await showDialog(
                          context: context,
                          builder: (context) => AlertDialog(
                            title: Text('Sukses'),
                            content: Text('UOM berhasil ditambahkan'),
                            actions: [
                              TextButton(
                                onPressed: () {
                                  Navigator.pop(
                                      context); // Close success dialog
                                  Navigator.pop(context); // Close add dialog
                                },
                                child: Text('OK'),
                              ),
                            ],
                          ),
                        );

                        _fetchUoms(); // Refresh the list
                      } catch (e) {
                        if (!mounted) return;

                        showDialog(
                          context: context,
                          builder: (context) => AlertDialog(
                            title: Text('Error'),
                            content: Text('Gagal menambahkan UOM: $e'),
                            actions: [
                              TextButton(
                                onPressed: () => Navigator.pop(context),
                                child: Text('OK'),
                              ),
                            ],
                          ),
                        );
                      } finally {
                        if (mounted) {
                          setState(() => isLoading = false);
                        }
                      }
                    },
              child: isLoading
                  ? SizedBox(
                      height: 20,
                      width: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : Text('Simpan'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _showEditUomDialog(Uom uom) async {
    final nameController = TextEditingController(text: uom.name);
    bool isLoading = false;

    return showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: Text('Edit UOM'),
          content: TextField(
            controller: nameController,
            decoration: InputDecoration(
              labelText: 'Nama UOM',
              border: OutlineInputBorder(),
            ),
          ),
          actions: [
            TextButton(
              onPressed: isLoading ? null : () => Navigator.pop(context),
              child: Text('Batal'),
            ),
            ElevatedButton(
              onPressed: isLoading
                  ? null
                  : () async {
                      if (nameController.text.isEmpty) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                              content: Text('Nama UOM tidak boleh kosong')),
                        );
                        return;
                      }

                      setState(() => isLoading = true);

                      try {
                        final updatedUom = Uom(
                          id: uom.id,
                          name: nameController.text,
                        );

                        await _uomService.updateUom(updatedUom);

                        if (!mounted) return;

                        Navigator.pop(context);
                        _fetchUoms(); // Refresh the list

                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('UOM berhasil diupdate')),
                        );
                      } catch (e) {
                        if (!mounted) return;

                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('Gagal mengupdate UOM: $e')),
                        );
                      } finally {
                        if (mounted) {
                          setState(() => isLoading = false);
                        }
                      }
                    },
              child: isLoading
                  ? SizedBox(
                      height: 20,
                      width: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : Text('Update'),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Daftar UOM'),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: _fetchUoms,
          ),
        ],
      ),
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : _error != null
              ? Center(child: Text(_error!))
              : _uomList.isEmpty
                  ? Center(child: Text('Tidak ada data UOM'))
                  : ListView.builder(
                      itemCount: _uomList.length,
                      itemBuilder: (context, index) {
                        final uom = _uomList[index];
                        return ListTile(
                          title: Text(uom.name),
                          subtitle: Text('ID: ${uom.id}'),
                          trailing: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              IconButton(
                                icon: Icon(Icons.edit),
                                onPressed: () => _showEditUomDialog(uom),
                              ),
                              IconButton(
                                icon: Icon(Icons.delete),
                                onPressed: () async {
                                  // Show confirmation dialog
                                  bool? confirm = await showDialog<bool>(
                                    context: context,
                                    builder: (context) => AlertDialog(
                                      title: Text('Konfirmasi'),
                                      content: Text(
                                          'Yakin ingin menghapus UOM ini?'),
                                      actions: [
                                        TextButton(
                                          onPressed: () =>
                                              Navigator.pop(context, false),
                                          child: Text('Batal'),
                                        ),
                                        TextButton(
                                          onPressed: () =>
                                              Navigator.pop(context, true),
                                          child: Text('Hapus'),
                                        ),
                                      ],
                                    ),
                                  );

                                  if (confirm == true) {
                                    try {
                                      await _uomService.deleteUom(uom.id);
                                      _fetchUoms();
                                      if (!mounted) return;
                                      ScaffoldMessenger.of(context)
                                          .showSnackBar(
                                        SnackBar(
                                            content:
                                                Text('UOM berhasil dihapus')),
                                      );
                                    } catch (e) {
                                      if (!mounted) return;
                                      ScaffoldMessenger.of(context)
                                          .showSnackBar(
                                        SnackBar(
                                            content: Text(
                                                'Gagal menghapus UOM: $e')),
                                      );
                                    }
                                  }
                                },
                              ),
                            ],
                          ),
                        );
                      },
                    ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddUomDialog,
        child: Icon(Icons.add),
      ),
    );
  }
}
